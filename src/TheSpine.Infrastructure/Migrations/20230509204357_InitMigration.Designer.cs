// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TheSpine.Infrastructure.DataAccess;

#nullable disable

namespace TheSpine.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20230509204357_InitMigration")]
    partial class InitMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TheSpine.Core.LeafNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("NodeId")
                        .HasColumnType("int");

                    b.Property<int>("ParentNodeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("NodeId");

                    b.ToTable("LeafNodes");
                });

            modelBuilder.Entity("TheSpine.Core.Node", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Nodes");
                });

            modelBuilder.Entity("TheSpine.Core.QuickLink", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SegmentItemId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SegmentItemId");

                    b.ToTable("QuickLinks");
                });

            modelBuilder.Entity("TheSpine.Core.Segment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("LeafNodeId")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.HasIndex("LeafNodeId");

                    b.ToTable("Segments");
                });

            modelBuilder.Entity("TheSpine.Core.SegmentItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Differentiator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("EaseOfUse")
                        .HasColumnType("int");

                    b.Property<string>("Licensing")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Rating")
                        .HasColumnType("float");

                    b.Property<int>("SegmentId")
                        .HasColumnType("int");

                    b.Property<string>("SegmentTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("SegmentId");

                    b.ToTable("SegmentItems");
                });

            modelBuilder.Entity("TheSpine.Core.LeafNode", b =>
                {
                    b.HasOne("TheSpine.Core.Node", null)
                        .WithMany("Children")
                        .HasForeignKey("NodeId");
                });

            modelBuilder.Entity("TheSpine.Core.QuickLink", b =>
                {
                    b.HasOne("TheSpine.Core.SegmentItem", null)
                        .WithMany("QuickLinks")
                        .HasForeignKey("SegmentItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheSpine.Core.Segment", b =>
                {
                    b.HasOne("TheSpine.Core.LeafNode", null)
                        .WithMany("Children")
                        .HasForeignKey("LeafNodeId");
                });

            modelBuilder.Entity("TheSpine.Core.SegmentItem", b =>
                {
                    b.HasOne("TheSpine.Core.Segment", null)
                        .WithMany("Rows")
                        .HasForeignKey("SegmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("TheSpine.Core.LeafNode", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("TheSpine.Core.Node", b =>
                {
                    b.Navigation("Children");
                });

            modelBuilder.Entity("TheSpine.Core.Segment", b =>
                {
                    b.Navigation("Rows");
                });

            modelBuilder.Entity("TheSpine.Core.SegmentItem", b =>
                {
                    b.Navigation("QuickLinks");
                });
#pragma warning restore 612, 618
        }
    }
}
